AWSTemplateFormatVersion: "2010-09-09"
Description: Game Spot Price Server via Docker / ECS
Parameters:

  ECSAMI:
    Description: "AWS ECS AMI ID - Default is for x86-64 (not arm64). See https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html"
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id

  MemoryReservationECS:
    Type: Number
    Description: "The memoryReservation parameter for the ECS Task in MiB"
    Default: 8192

  GameImage:
    Type: String
    Description: "Docker Hub Image Name"
    Default: "wolveix/satisfactory-server"

  GameImageTag:
    Type: String
    Description: "Docker Image Tag, e.g., latest - see https://hub.docker.com/r/wolveix/satisfactory-server/tags"
    Default: "latest"

  ServerState:
    Type: String
    Description: "Running: A spot instance will launch shortly after setting this parameter; your Game server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Game container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  InstanceType:
    Type: String
    Description: "Instance type change at your discretion, will have a direct impact on cost -- see https://aws.amazon.com/ec2/instance-types/ ."
    Default: t3.xlarge

  SpotPrice:
    Type: String
    Description: "Maximum spot pricing. Will not launch if current price exceeds this. Check pricing history via https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html -- NOTE: Leave this blank to use on-demand pricing."
    Default: "0.08"

  KeyPairName:
    Type: String
    Description: "SSH key name (Optional - An empty value disables this feature)"
    Default: ''

  YourIPv4:
    Type: String
    Description: "(Optional - An empty value disables this feature) Restrict SSH to this address"
    Default: ''

  YourIPv6:
    Type: String
    Description: "(Optional - An empty value disables this feature) Restrict SSH to this address"
    Default: ''

  ServerPort:
    Type: Number
    Description: "Listen TCP/UDP Port on Internet"
    Default: 7777

  ContainerPort:
    Type: Number
    Description: "Listen TCP/UDP Port within the Container"
    Default: 7777

  VpcCidrBlock:
    Type: String
    Description: "VPC Address Range, CIDR notation (/26 recommended, VPC subnets will be /28 regardless)"
    Default: "10.100.1.0/26"

  VolumeMountPoint:
    Type: String
    Description: "Path to mount the Efs Volume"
    Default: "/config"

  MaxPlayers:
    Type: Number
    Description: "Number of players. May affect CPU/RAM needs."
    Default: 8

  PUserId:
    Type: String
    Description: (Optional - empty does not override) PUID - Override Linux user ID
    Value: ''

  PGroupId:
    Type: String
    Description: (Optional - empty does not override) PGID - Override Linux group ID
    Value: ''

  HostedZoneId:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Game instance starts, supply the hosted zone ID here (long alphanumeric string).
    Default: ''

  RecordName:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Game instance starts, supply the name of the full record here (e.g. gameygame.example.com).
    Default: ''

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Essential Configuration
        Parameters:
        - GameImage
        - GameImageTag
        - ServerState
        - InstanceType
        - SpotPrice
        - ServerPort
      - Label:
          default: Other Server Settings
        Parameters:
        - MaxPlayers
      - Label:
          default: Remote Access (SSH) Configuration (Optional)
        Parameters:
        - KeyPairName
        - YourIPv4
        - YourIPv6
      - Label:
          default: Optional DNS Configuration
        Parameters:
        - HostedZoneId
        - RecordName
      - Label:
          default: Nerdy Details
        Parameters:
        - ECSAMI
        - PUserId
        - PGroupId
        - ContainerPort
        - VolumeMountPoint
        - MemoryReservationECS
        - VpcCidrBlock
    ParameterLabels:
      GameImage:
        default: "Which docker hub container are you using?"
      GameImageTag:
        default: "Which version of the Game image do you want to launch?"
      ServerState:
        default: "Update this parameter to shut down / start up your Game server as required to save on cost. Takes a few minutes to take effect (ASG target)."
      InstanceType:
        default: "Which instance type? You must make sure this is available in your region! https://aws.amazon.com/ec2/pricing/on-demand/"
      SpotPrice:
        default: "Maximum spot price per hour? Leave blank to disable spot pricing."
      KeyPairName:
        default: "If you wish to access the instance via SSH, select a Key Pair to use. https://console.aws.amazon.com/ec2/v2/home?#KeyPairs:sort=keyName"
      YourIPv4:
        default: "If you wish to access the instance via SSH, provide your public IP v4 address."
      YourIPv6:
        default: "If you wish to access the instance via SSH, provide your public IP v6 address."
      HostedZoneId:
        default: "If you have a hosted zone in Route 53 and wish to update a DNS record whenever your Game instance starts, supply the hosted zone ID here (not the domain; the ID)."
      RecordName:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Game instance starts, supply a record name here (e.g. gameygame.mydomain.com)."
      ECSAMI:
        default: "ECS AMI Name"
      PUserId:
        default: "Set the PUID env var if needed, e.g., 1000"
      PGroupId:
        default: "Set the PGID env var if needed, e.g., 1000"
      ContainerPort:
        default: "Set internal port used by the daemon in the container"
      MemoryReservationECS:
        default: "Minimum required memory for the container (check wiki/etc. recommendations)"
      VpcCidrBlock:
        default: "IPv4 address range for the VPC; for sanity, don't overlap with other VPCs!"
Conditions:
  KeyPairNameProvided: !Not [ !Equals [ !Ref KeyPairName, '' ] ]
  IPv4AddressProvided: !Not [ !Equals [ !Ref YourIPv4, '' ] ]
  IPv6AddressProvided: !Not [ !Equals [ !Ref YourIPv6, '' ] ]
  PUserIdProvided: !Not [ !Equals [ !Ref PUserId, '' ] ]
  PGroupIdProvided: !Not [ !Equals [ !Ref PGroupId, '' ] ]
  DnsConfigEnabled: !And [ !Not [ !Equals [ !Ref HostedZoneId, '' ] ], !Not [ !Equals [ !Ref RecordName, '' ] ] ]
  SpotPriceProvided: !Not [ !Equals [ !Ref SpotPrice, '' ] ]

Mappings:
  ServerState:
    Running:
      DesiredCapacity: 1
    Stopped:
      DesiredCapacity: 0

Resources:

  # ====================================================
  # BASIC VPC
  # ====================================================

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      # 1 = the "b" zone, usually
      AvailabilityZone: !Select
      - 1
      - !GetAZs
        Ref: 'AWS::Region'
      CidrBlock: !Select [ 0, !Cidr [ !Ref VpcCidrBlock, 4, 4 ] ]
      VpcId: !Ref Vpc

  SubnetARoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  SubnetBRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      # 2 = the "c" zone, usually
      AvailabilityZone: !Select
      - 2
      - !GetAZs
        Ref: 'AWS::Region'
      CidrBlock: !Select [ 1, !Cidr [ !Ref VpcCidrBlock, 4, 4 ] ]
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  # ====================================================
  # EFS FOR PERSISTENT DATA
  # ====================================================

  Efs:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  MountA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  MountB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  EfsSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs"
      GroupDescription: !Sub "${AWS::StackName}-efs"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG
  # ====================================================

  Ec2Sg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2"
      GroupDescription: !Sub "${AWS::StackName}-ec2"
      SecurityGroupIngress:
      - !If
        - IPv4AddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIPv4}/32"
        - !Ref 'AWS::NoValue'
      - !If
        - IPv6AddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIpv6: !Sub "${YourIPv6}/128"
        - !Ref 'AWS::NoValue'
      - FromPort: !Ref ServerPort
        ToPort: !Ref ServerPort
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - FromPort: !Ref ServerPort
        ToPort: !Ref ServerPort
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
      VpcId: !Ref Vpc

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"

  EcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service"
      TaskDefinition: !Ref EcsTask
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - MountA
    - MountB
    Properties:
      Volumes:
      - Name: gamedata
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: game
          MemoryReservation: !Ref MemoryReservationECS
          Image: !Sub "${GameImage}:${GameImageTag}"
          PortMappings:
          - ContainerPort: !Ref ContainerPort
            HostPort: !Ref ServerPort
            Protocol: udp
          - ContainerPort: !Ref ContainerPort
            HostPort: !Ref ServerPort
            Protocol: tcp
          MountPoints:
          - ContainerPath: !Ref VolumeMountPoint
            SourceVolume: gamedata
            ReadOnly: false
          Environment:
          - Name: MAXPLAYERS
            Value: !Sub "${MaxPlayers}"
      - Name: ROOTLESS
        Value: false
      - Name: STEAMBETA
        Value: false
      - !If
        - PUserIdProvided
        - Name: "PUID"
          Value: !Sub "${PUserId}"
        - !Ref 'AWS::NoValue'
      - !If
        - PGroupIdProvided
        - Name: "PGID"
          Value: !Sub "${PGroupId}"
        - !Ref 'AWS::NoValue'

  # ====================================================
  # SET DNS RECORD
  # ====================================================

  SetDNSRecordLambdaRole:
    Type: AWS::IAM::Role
    Condition: DnsConfigEnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "route53:ChangeResourceRecordSets"
                Resource: !Sub "arn:aws:route53:::hostedzone/${HostedZoneId}"
              - Effect: "Allow"
                Action: "ec2:DescribeInstance*"
                Resource: "*"

  SetDNSRecordLambda:
    Type: "AWS::Lambda::Function"
    Condition: DnsConfigEnabled
    Properties:
      Environment:
        Variables:
          HostedZoneId: !Ref HostedZoneId
          RecordName: !Ref RecordName
      Code:
        ZipFile: |
          import boto3
          import os
          def handler(event, context):
            new_instance = boto3.resource('ec2').Instance(event['detail']['EC2InstanceId'])
            boto3.client('route53').change_resource_record_sets(
              HostedZoneId= os.environ['HostedZoneId'],
              ChangeBatch={
                  'Comment': 'updating',
                  'Changes': [
                      {
                          'Action': 'UPSERT',
                          'ResourceRecordSet': {
                              'Name': os.environ['RecordName'],
                              'Type': 'A',
                              'TTL': 60,
                              'ResourceRecords': [
                                  {
                                      'Value': new_instance.public_ip_address
                                  },
                              ]
                          }
                      },
                  ]
              })
      Description: Sets Route 53 DNS Record for Game
      FunctionName: !Sub "${AWS::StackName}-set-dns"
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt SetDNSRecordLambdaRole.Arn
      Runtime: python3.12
      Timeout: 20

  LaunchEvent:
    Type: AWS::Events::Rule
    Condition: DnsConfigEnabled
    Properties:
      EventPattern:
        source:
        - aws.autoscaling
        detail-type:
        - EC2 Instance Launch Successful
        detail:
          AutoScalingGroupName:
          - !Ref AutoScalingGroup
      Name: !Sub "${AWS::StackName}-instance-launch"
      State: ENABLED
      Targets:
        - Arn: !GetAtt SetDNSRecordLambda.Arn
          Id: !Sub "${AWS::StackName}-set-dns"

  LaunchEventLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: DnsConfigEnabled
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SetDNSRecordLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LaunchEvent.Arn

Outputs:
  CheckInstanceIp:
    Description: To find your Game instance IP address, visit the following link. Click on the instance to find its Public IP address.
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2/v2/home?region=${AWS::Region}#Instances:tag:aws:autoscaling:groupName=${AutoScalingGroup};sort=tag:Name"
